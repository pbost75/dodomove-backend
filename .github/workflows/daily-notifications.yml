name: üìß DodoPartage - Notifications d'Expiration Quotidiennes

on:
  schedule:
    # Rappels 3 jours avant expiration - 5h UTC (7h Paris)
    - cron: '0 5 * * *'
    # Expiration automatique - 6h UTC (8h Paris) 
    - cron: '0 6 * * *'
    # Notifications post-expiration - 7h UTC (9h Paris)
    - cron: '0 7 * * *'
  
  # Permettre l'ex√©cution manuelle
  workflow_dispatch:
    inputs:
      task:
        description: 'T√¢che √† ex√©cuter'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - reminders
          - expiration
          - notifications

env:
  BACKEND_URL: https://web-production-7b738.up.railway.app

jobs:
  determine-task:
    runs-on: ubuntu-latest
    outputs:
      should_run_reminders: ${{ steps.determine.outputs.should_run_reminders }}
      should_run_expiration: ${{ steps.determine.outputs.should_run_expiration }}
      should_run_notifications: ${{ steps.determine.outputs.should_run_notifications }}
    steps:
      - name: üéØ D√©terminer les t√¢ches √† ex√©cuter
        id: determine
        run: |
          current_hour=$(date -u +%H)
          manual_task="${{ github.event.inputs.task }}"
          
          echo "üïê Heure UTC actuelle: ${current_hour}h"
          echo "üìù T√¢che manuelle: ${manual_task}"
          
          # Logique pour les t√¢ches automatiques (cron)
          if [ -z "$manual_task" ]; then
            if [ "$current_hour" = "05" ]; then
              echo "should_run_reminders=true" >> $GITHUB_OUTPUT
              echo "should_run_expiration=false" >> $GITHUB_OUTPUT  
              echo "should_run_notifications=false" >> $GITHUB_OUTPUT
              echo "üîî Planifi√©: Rappels J-3 uniquement"
            elif [ "$current_hour" = "06" ]; then
              echo "should_run_reminders=false" >> $GITHUB_OUTPUT
              echo "should_run_expiration=true" >> $GITHUB_OUTPUT
              echo "should_run_notifications=false" >> $GITHUB_OUTPUT
              echo "‚è∞ Planifi√©: Expiration uniquement"
            elif [ "$current_hour" = "07" ]; then
              echo "should_run_reminders=false" >> $GITHUB_OUTPUT
              echo "should_run_expiration=false" >> $GITHUB_OUTPUT
              echo "should_run_notifications=true" >> $GITHUB_OUTPUT
              echo "üìß Planifi√©: Notifications post-expiration uniquement"
            else
              echo "should_run_reminders=false" >> $GITHUB_OUTPUT
              echo "should_run_expiration=false" >> $GITHUB_OUTPUT
              echo "should_run_notifications=false" >> $GITHUB_OUTPUT
              echo "üò¥ Aucune t√¢che planifi√©e pour cette heure"
            fi
          # Logique pour l'ex√©cution manuelle
          else
            if [ "$manual_task" = "all" ]; then
              echo "should_run_reminders=true" >> $GITHUB_OUTPUT
              echo "should_run_expiration=true" >> $GITHUB_OUTPUT
              echo "should_run_notifications=true" >> $GITHUB_OUTPUT
              echo "üöÄ Manuel: Toutes les t√¢ches"
            elif [ "$manual_task" = "reminders" ]; then
              echo "should_run_reminders=true" >> $GITHUB_OUTPUT
              echo "should_run_expiration=false" >> $GITHUB_OUTPUT
              echo "should_run_notifications=false" >> $GITHUB_OUTPUT
              echo "üîî Manuel: Rappels uniquement"
            elif [ "$manual_task" = "expiration" ]; then
              echo "should_run_reminders=false" >> $GITHUB_OUTPUT
              echo "should_run_expiration=true" >> $GITHUB_OUTPUT
              echo "should_run_notifications=false" >> $GITHUB_OUTPUT
              echo "‚è∞ Manuel: Expiration uniquement"
            elif [ "$manual_task" = "notifications" ]; then
              echo "should_run_reminders=false" >> $GITHUB_OUTPUT
              echo "should_run_expiration=false" >> $GITHUB_OUTPUT
              echo "should_run_notifications=true" >> $GITHUB_OUTPUT
              echo "üìß Manuel: Notifications uniquement"
            fi
          fi

  send-expiration-reminders:
    needs: determine-task
    if: needs.determine-task.outputs.should_run_reminders == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: üîî Envoi des rappels d'expiration (J-3)
        run: |
          echo "üìÖ Calcul de la date J+3..."
          reminder_date=$(date -d "+3 days" +%Y-%m-%d)
          echo "üéØ Date cible: $reminder_date"
          
          echo "üì° R√©cup√©ration des annonces expirant dans 3 jours..."
          response=$(curl -s -w "%{http_code}" \
            -H "Content-Type: application/json" \
            "${{ env.BACKEND_URL }}/api/partage/get-expiring-soon?reminderDate=${reminder_date}")
          
          http_code=$(echo "$response" | tail -c 4)
          body=$(echo "$response" | head -c -4)
          
          if [ "$http_code" = "200" ]; then
            count=$(echo "$body" | jq -r '.data | length')
            echo "‚úÖ API accessible - $count annonce(s) trouv√©e(s)"
            
            if [ "$count" -gt 0 ]; then
              echo "üìß Envoi des emails de rappel..."
              
              # Extraire les IDs et envoyer les rappels
              echo "$body" | jq -r '.data[].id' | while read -r announcement_id; do
                echo "üìÆ Envoi rappel pour annonce: $announcement_id"
                
                curl_response=$(curl -s -w "%{http_code}" \
                  -X POST \
                  -H "Content-Type: application/json" \
                  -d "{\"announcementId\":\"$announcement_id\",\"reminderType\":\"3_days_before\"}" \
                  "${{ env.BACKEND_URL }}/api/partage/send-expiration-reminder")
                
                email_http_code=$(echo "$curl_response" | tail -c 4)
                
                if [ "$email_http_code" = "200" ]; then
                  echo "  ‚úÖ Email envoy√© avec succ√®s"
                else
                  echo "  ‚ùå Erreur envoi email: $email_http_code"
                fi
              done
              
              echo "üìä Processus de rappel termin√©"
            else
              echo "üò¥ Aucun rappel √† envoyer aujourd'hui"
            fi
          else
            echo "‚ùå Erreur API: $http_code"
            echo "$body"
            exit 1
          fi

  expire-announcements:
    needs: determine-task
    if: needs.determine-task.outputs.should_run_expiration == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: ‚è∞ Expiration automatique des annonces
        run: |
          echo "üöÄ D√©clenchement du processus d'expiration..."
          
          response=$(curl -s -w "%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            "${{ env.BACKEND_URL }}/api/cron/expire-announcements")
          
          http_code=$(echo "$response" | tail -c 4)
          body=$(echo "$response" | head -c -4)
          
          if [ "$http_code" = "200" ]; then
            echo "‚úÖ Processus d'expiration r√©ussi"
            
            # Extraire les statistiques
            expired_count=$(echo "$body" | jq -r '.expired // 0')
            remaining_count=$(echo "$body" | jq -r '.remaining_published // 0')
            duration=$(echo "$body" | jq -r '.duration // "unknown"')
            
            echo "üìä Statistiques:"
            echo "  ‚Ä¢ Annonces expir√©es: $expired_count"
            echo "  ‚Ä¢ Annonces restantes: $remaining_count" 
            echo "  ‚Ä¢ Dur√©e: $duration"
            
            # Afficher les d√©tails des annonces expir√©es
            if [ "$expired_count" -gt 0 ]; then
              echo "üìã Annonces expir√©es:"
              echo "$body" | jq -r '.details[]? | "  ‚Ä¢ \(.name) - \(.route)"'
            fi
          else
            echo "‚ùå Erreur processus d'expiration: $http_code"
            echo "$body"
            exit 1
          fi

  send-post-expiration-notifications:
    needs: [determine-task, expire-announcements]
    if: always() && needs.determine-task.outputs.should_run_notifications == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: üìß Notifications post-expiration
        run: |
          echo "üìÖ R√©cup√©ration des annonces r√©cemment expir√©es..."
          
          response=$(curl -s -w "%{http_code}" \
            -H "Content-Type: application/json" \
            "${{ env.BACKEND_URL }}/api/partage/get-recently-expired")
          
          http_code=$(echo "$response" | tail -c 4)
          body=$(echo "$response" | head -c -4)
          
          if [ "$http_code" = "200" ]; then
            count=$(echo "$body" | jq -r '.data | length')
            echo "‚úÖ API accessible - $count annonce(s) r√©cemment expir√©e(s)"
            
            if [ "$count" -gt 0 ]; then
              echo "üìß Envoi des notifications post-expiration..."
              
              # Extraire les donn√©es et envoyer les notifications
              echo "$body" | jq -r '.data[] | "\(.id)|\(.expired_at)|\(.expiration_reason // "unknown")"' | while IFS='|' read -r announcement_id expired_at expiration_reason; do
                echo "üìÆ Notification pour annonce: $announcement_id"
                
                curl_response=$(curl -s -w "%{http_code}" \
                  -X POST \
                  -H "Content-Type: application/json" \
                  -d "{\"announcementId\":\"$announcement_id\",\"expiredAt\":\"$expired_at\",\"expirationReason\":\"$expiration_reason\"}" \
                  "${{ env.BACKEND_URL }}/api/partage/send-post-expiration-notification")
                
                email_http_code=$(echo "$curl_response" | tail -c 4)
                
                if [ "$email_http_code" = "200" ]; then
                  echo "  ‚úÖ Notification envoy√©e avec succ√®s"
                else
                  echo "  ‚ùå Erreur envoi notification: $email_http_code"
                fi
              done
              
              echo "üìä Processus de notification termin√©"
            else
              echo "üò¥ Aucune notification √† envoyer"
            fi
          else
            echo "‚ùå Erreur API: $http_code"
            echo "$body"
            exit 1
          fi

  summary:
    needs: [determine-task, send-expiration-reminders, expire-announcements, send-post-expiration-notifications]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: üìä R√©sum√© de l'ex√©cution
        run: |
          echo "üéØ R√âSUM√â NOTIFICATIONS DODOPARTAGE"
          echo "=================================="
          echo ""
          echo "üìÖ Date: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "üïê Heure: $(date -u +%H)h UTC ($(date +'%H')h Local)"
          echo ""
          echo "üìã T√¢ches ex√©cut√©es:"
          
          if [ "${{ needs.determine-task.outputs.should_run_reminders }}" = "true" ]; then
            if [ "${{ needs.send-expiration-reminders.result }}" = "success" ]; then
              echo "  ‚úÖ Rappels J-3: R√©ussi"
            else
              echo "  ‚ùå Rappels J-3: √âchec"
            fi
          else
            echo "  ‚è≠Ô∏è Rappels J-3: Non planifi√©"
          fi
          
          if [ "${{ needs.determine-task.outputs.should_run_expiration }}" = "true" ]; then
            if [ "${{ needs.expire-announcements.result }}" = "success" ]; then
              echo "  ‚úÖ Expiration: R√©ussi"
            else
              echo "  ‚ùå Expiration: √âchec"
            fi
          else
            echo "  ‚è≠Ô∏è Expiration: Non planifi√©"
          fi
          
          if [ "${{ needs.determine-task.outputs.should_run_notifications }}" = "true" ]; then
            if [ "${{ needs.send-post-expiration-notifications.result }}" = "success" ]; then
              echo "  ‚úÖ Notifications post: R√©ussi"
            else
              echo "  ‚ùå Notifications post: √âchec"
            fi
          else
            echo "  ‚è≠Ô∏è Notifications post: Non planifi√©"
          fi
          
          echo ""
          echo "üîó Surveillance: https://github.com/${{ github.repository }}/actions"
          echo "üìä Backend: ${{ env.BACKEND_URL }}/health" 